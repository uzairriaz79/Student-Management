import unittest
import json
from your_flask_app import app, db, Student

class TestStudentAPI(unittest.TestCase):

    def setUp(self):
        app.config['TESTING'] = True
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'  # Use in-memory database for testing
        self.app = app.test_client()
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_student(self):
        data = {'name': 'uzair', 'college': 'Example University', 'address': '123 Main St', 'phone': '1234567890'}
        response = self.app.post('/students', data=json.dumps(data), content_type='application/json')
        self.assertEqual(response.status_code, 201)

    def test_get_students(self):
        response = self.app.get('/students')
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.get_data(as_text=True))
        self.assertEqual(type(data), list)

    def test_delete_student(self):
        student = Student(name='John Doe', college='Example University', address='123 Main St', phone='1234567890')
        db.session.add(student)
        db.session.commit()

        response = self.app.delete(f'/students/{student.id}')
        self.assertEqual(response.status_code, 200)

        response = self.app.delete('/students/999')  # Non-existing student ID
        self.assertEqual(response.status_code, 404)

    def test_update_student(self):
        student = Student(name='John Doe', college='Example University', address='123 Main St', phone='1234567890')
        db.session.add(student)
        db.session.commit()

        updated_data = {'name': 'Updated Name', 'college': 'Updated College', 'address': 'Updated Address', 'phone': '9876543210'}
        response = self.app.put(f'/students/{student.id}', data=json.dumps(updated_data), content_type='application/json')
        self.assertEqual(response.status_code, 200)

        updated_student = Student.query.get(student.id)
        self.assertEqual(updated_student.name, updated_data['name'])
        self.assertEqual(updated_student.college, updated_data['college'])
        self.assertEqual(updated_student.address, updated_data['address'])
        self.assertEqual(updated_student.phone, updated_data['phone'])

        response = self.app.put('/students/999', data=json.dumps(updated_data), content_type='application/json')  # Non-existing student ID
        self.assertEqual(response.status_code, 404)

if __name__ == '__main__':
    unittest.main()
import unittest
import json
from your_flask_app import app, db, Student

class TestStudentAPI(unittest.TestCase):

    def setUp(self):
        app.config['TESTING'] = True
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'  # Use in-memory database for testing
        self.app = app.test_client()
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_student(self):
        data = {'name': 'John Doe', 'college': 'Example University', 'address': '123 Main St', 'phone': '1234567890'}
        response = self.app.post('/students', data=json.dumps(data), content_type='application/json')
        self.assertEqual(response.status_code, 201)

    def test_get_students(self):
        response = self.app.get('/students')
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.get_data(as_text=True))
        self.assertEqual(type(data), list)

    def test_delete_student(self):
        student = Student(name='John Doe', college='Example University', address='123 Main St', phone='1234567890')
        db.session.add(student)
        db.session.commit()

        response = self.app.delete(f'/students/{student.id}')
        self.assertEqual(response.status_code, 200)

        response = self.app.delete('/students/999')  # Non-existing student ID
        self.assertEqual(response.status_code, 404)

    def test_update_student(self):
        student = Student(name='John Doe', college='Example University', address='123 Main St', phone='1234567890')
        db.session.add(student)
        db.session.commit()

        updated_data = {'name': 'Updated Name', 'college': 'Updated College', 'address': 'Updated Address', 'phone': '9876543210'}
        response = self.app.put(f'/students/{student.id}', data=json.dumps(updated_data), content_type='application/json')
        self.assertEqual(response.status_code, 200)

        updated_student = Student.query.get(student.id)
        self.assertEqual(updated_student.name, updated_data['name'])
        self.assertEqual(updated_student.college, updated_data['college'])
        self.assertEqual(updated_student.address, updated_data['address'])
        self.assertEqual(updated_student.phone, updated_data['phone'])

        response = self.app.put('/students/999', data=json.dumps(updated_data), content_type='application/json')  # Non-existing student ID
        self.assertEqual(response.status_code, 404)

if __name__ == '__main__':
    unittest.main()
